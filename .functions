PROJECT_ROOT="$HOME/projects"

## NPM / repo scaffolds

function npmify() {
    local result=ngenplus $1 $2

    if [ $result == 22 ]
    then
        echo "ngenplus failed!"
        return
    fi
    nstart
}

# Deals with not disk
function __nstart() {
    local testling=0
    local travis=0
    local repoName=$1

    # dumb args parsing since I couldn't get getopts to work inside a function
    # -a turns on travis, -s turns on testling
    for v in $@
    do
      [[ $v == '-a' ]] && travis=1
      [[ $v == '-s' ]] && testling=1
    done

    # deals with git
    git init
    git add .
    git commit -m "initial"
    # deals with github
    hub create $repoName
    git push origin master

    # deals with travis
    if [[ $travis == 1 ]]; then
        travisify
        travisify test
    fi

    # deals with testling
    if [[ $testling == 1 ]]; then
        testlingify
        testlingify test
    fi

    npm publish
}

function nstart() {
    __nstart "$(basename $PWD)" "$@"
}

function colingo-nstart() {
    __nstart "Colingo/$(basename $PWD)" "$@"
}

function __ngenplus() {
    local scaffold=$1
    local projectName=$2
    local isFree=""

    isFree="$(npm info $projectName 2>&1 | grep 'npm ERR! 404 You should bug the author to publish it')"

    # if $isFree is empty then BAD. If it's not empty then GOOD
    if [[ ! -n "$isFree" ]]; then
        echo "$projectName already taken on npm"
        npm info ${projectName} name description author
        return 22
    fi

    local tmpf=$(tempfile)

    if [ ! -z $3 ]; then
        cp "$3" $tmpf
    fi

    cd $PROJECT_ROOT
    $scaffold $projectName
    cd $projectName

    if [ ! -z $3 ]; then
        cp "$tmpf" ./index.js
        rm $tmpf
    fi

    npm i
}

function ngenplus() {
    __ngenplus "ngen" $1 $2
}

function colingo-ngenplus() {
    __ngenplus "colingo-ngen" $1 $2
}

## Git and github work flows

# ENSURE that you have hub installed locally.
# Opens a pull request from your origin remote to another
# remote on a branch on github.
# Will open up a git style editor for the pull request message
# body.
# the branch defaults to the checked out branch. To change it
# pass in $1.
# the remote defaults to the named remote github. To change it
# pass in $2. ENSURE that the remote is a github username and not
# a git remote.
# pr_github ${BRANCH} ${REMOTE}
function pr_github() {
    local branch="${1:-$(git rev-parse --abbrev-ref HEAD)}"

    local status="$(git status | grep 'Changes to be committed')"

    if [[ -n "$status" ]]; then
        echo git commit
        git commit 3>&1 1>&2 2>&3
    fi

    local origin="$(git remote -v | grep 'origin\s' | head -n 1 | awk '{ match($0, /git@github.com\:([_a-zA-Z]+)/); split(substr($0, RSTART, RLENGTH), a, /[":]/); print a[2] }')"
    local github="$(git remote -v | grep 'github\s' | head -n 1 | awk '{ match($0, /git@github.com\:([_a-zA-Z]+)/); split(substr($0, RSTART, RLENGTH), a, /[":]/); print a[2] }')"

    local remote=${2:-$github}

    git fetch github
    result="$(git pull github $branch | grep 'Merge conflict in')"

    if [ "$result" != "" ]; then
        echo "MERGE CONFLICT ;___;"
        return 1
    fi

    git push origin $branch
    echo git push $origin $branch
    exec 5>&1
    echo hub pull-request -h $origin:$branch -b $remote:$branch
    local uri="$( (hub pull-request -h $origin:$branch -b $remote:$branch) | tee /dev/fd/5)"
    # echo "uri $uri"

    # if [ "$uri" != "Aborting due to empty pull request title" && "$uri" != "" ]
    # then
        # echo "open $uri"
        # google-chrome "$uri"
    # fi
    # TODO: auto merge
}

## Utils

function set_terminal_title() {
    export ___TERMINAL_TITLE=$1
    PROMPT_COMMAND='echo -ne "\033]0;${___TERMINAL_TITLE}\007"'
}

