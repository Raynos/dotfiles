PROJECT_ROOT="$HOME/projects"

## NPM / repo scaffolds

function npmify() {
    local result=ngenplus $1 $2

    if [ $result == 22 ]
    then
        echo "ngenplus failed!"
        return
    fi
    nstart
}

function nstart() {
    local testling=0
    local travis=0

    # dumb args parsing since I couldn't get getopts to work inside a function
    # -a turns on travis, -s turns on testling
    for v in $@
    do
      [[ $v == '-a' ]] && travis=1
      [[ $v == '-s' ]] && testling=1
    done

    git init
    git add .
    git commit -m "initial"
    hub create $(basename $PWD)
    git push origin master

    if [[ $travis == 1 ]]; then
        travisify
        travisify test
    fi

    if [[ $testling == 1 ]]; then
        testlingify
        testlingify test
    fi

    npm publish
}

function colingo-nstart() {
    git init
    git add .
    git commit -m "initial"
    hub create Colingo/$(basename $PWD)
    git push origin master
    travisify
    travisify test
    testlingify
    testlingify test
    npm publish
}

function ngenplus() {
    local projectName=$1
    local isFree=""

    isFree="$(npm info $projectName 2>&1 | grep 'npm ERR! 404 You should bug the author to publish it')"

    # if $isFree is empty then BAD. If it's not empty then GOOD
    if [[ ! -n "$isFree" ]]; then
        echo "$projectName already taken on npm"
        npm info ${projectName} name description author
        return 22
    fi

    local fileLocation="$(pwd)/$2"

    cd $PROJECT_ROOT
    ngen $1
    cd $1

    if [ ! -z $2 ]; then
        cp "$fileLocation" ./index.js
    fi

    npm i
}

function colingo-ngenplus() {
    local projectName=$1
    local isFree=""

    isFree="$(npm info $projectName 2>&1 | grep 'npm ERR! 404 You should bug the author to publish it')"

    # if $isFree is empty then BAD. If it's not empty then GOOD
    if [[ ! -n "$isFree" ]]; then
        echo "$projectName already taken on npm"
        npm info ${projectName} name description author
        exit 1
    fi

    local fileLocation="$(pwd)/$2"

    cd $PROJECT_ROOT
    colingo-ngen $1
    cd $1

    if [ ! -z $2 ]; then
        cp "$fileLocation" ./index.js
    fi

    npm i
}

## Git and github work flows

function pr_github() {
    local branch=${1:-master}

    local status="$(git status | grep 'Changes to be committed')"

    if [[ -n "$status" ]]; then
        echo git commit
        git commit 3>&1 1>&2 2>&3
    fi

    local origin="$(git remote -v | grep 'origin\s' | head -n 1 | awk '{ match($0, /git@github.com\:([_a-zA-Z]+)/); split(substr($0, RSTART, RLENGTH), a, /[":]/); print a[2] }')"
    local github="$(git remote -v | grep 'github\s' | head -n 1 | awk '{ match($0, /git@github.com\:([_a-zA-Z]+)/); split(substr($0, RSTART, RLENGTH), a, /[":]/); print a[2] }')"

    local remote=${2:-$github}

    git push origin $branch
    echo git push origin $branch
    local result=$(tempfile)
    hub pull-request -h $origin:$branch -b $remote:$branch 2>$result
    echo "catting result"
    cat $result
    echo "result catted"
    local uri="$(cat $result)"
    echo hub pull-request -h $origin:$branch -b $remote:$branch
    rm $result

    if [ "$uri" != "Aborting due to empty pull request title" ]
    then
        echo "open $uri"
        google-chrome "$uri"
    fi
    # TODO: auto merge
}

## Test & testing work flows

# file defaults to `./test`
# usage: testem-node {{file}}
function testem-node() {
    # local defaultEntry="./test"
    local nodeCommand
    if [ ! -z $1 ]; then
        nodeCommand="node $1"
    else
        nodeCommand="npm test"
    fi
    local tmpf=$(tempfile)
    mv $tmpf "$tmpf.json"
    local result="$tmpf.json"

    # echo $result

    echo '{' >> $result
    echo '    "launchers": {' >> $result
    echo '        "node": {' >> $result
    echo "            \"command\": \"$nodeCommand\"," >> $result
    echo '            "protocol": "tap"' >> $result
    echo '        }' >> $result
    echo '    },' >> $result
    echo '    "src_files": [' >> $result
    echo '        "./**/*.js"' >> $result
    echo '    ],' >> $result
    echo '    "launch_in_dev": ["node"]' >> $result
    echo '}' >> $result

    # echo "$(cat $result)"
    # echo testem --file="$result"

    testem --file="$result"
    rm $result
}

function testem-browser() {
    local test_page="$HOME/testem/test-page.html"

    testem --file="$HOME/testem/browser.json" \
        --test_page="$test_page"
}

function testem-both() {
    testem --file="$HOME/testem/both.json"
}

## Utils

function set_terminal_title() {
    export ___TERMINAL_TITLE=$1
    PROMPT_COMMAND='echo -ne "\033]0;${___TERMINAL_TITLE}\007"'
}

