## NPM / repo scaffolds

function npmify() {
    ngenplus $1 $2
    nstart
}

function nstart() {
    git init
    git add .
    git commit -m "initial"
    hub create Raynos/$(basename $PWD)
    travisify
    travisify test
    npublish
}

function colingo-nstart() {
    git init
    git add .
    git commit -m "initial"
    hub create Colingo/$(basename $PWD)
    travisify
    travisify test
    npublish
}

function ngenplus() {
    local projectName=$1
    local isFree=""

    isFree="$(npm info $projectName 2>&1 | grep 'npm ERR! 404 You should bug the author to publish it')"

    # if $isFree is empty then BAD. If it's not empty then GOOD
    if [[ ! -n "$isFree" ]]; then
        echo "$projectName already taken on npm"
        npm info ${projectName} name description author
        return
    fi

    local fileLocation="$(pwd)/$2"c

    cd ~/projects
    ngen $1
    cd $1

    if [ ! -z $2 ]; then
        cp "$fileLocation" ./index.js
    fi

    npm i
}

function colingo-ngenplus() {
    local projectName=$1
    local isFree=""

    isFree="$(npm info $projectName 2>&1 | grep 'npm ERR! 404 You should bug the author to publish it')"

    # if $isFree is empty then BAD. If it's not empty then GOOD
    if [[ ! -n "$isFree" ]]; then
        echo "$projectName already taken on npm"
        npm info ${projectName} name description author
        return
    fi

    local fileLocation="$(pwd)/$2"

    cd ~/projects
    colingo-ngen $1
    cd $1

    if [ ! -z $2 ]; then
        cp "$fileLocation" ./index.js
    fi

    npm i
}

## Git and github work flows

function pr_github() {
    local branch=${1:-master}

    local status="$(git status | grep 'Changes to be committed')"

    if [[ -n "$status" ]]; then
        echo git commit
        git commit 3>&1 1>&2 2>&3
    fi

    git push origin $branch
    echo git push origin $branch
    local result=$(tempfile)
    hub pull-request -h Raynos:$branch -b Colingo:$branch 2>$result
    local uri="$(cat $result)"
    echo hub pull-request -h Raynos:$branch -b Colingo:$branch
    rm $result

    if [ "$uri" != "Aborting due to empty pull request title" ]
    then
        echo "open $uri"
        google-chrome "$uri"
    fi
    # TODO: auto merge
}

## Test & testing work flows

function testem-node() {
    testem --file="$HOME/testem/node.json"
}

function testem-browser() {
    testem --file="$HOME/testem/browser.json"
}

function testem-both() {
    testem --file="$HOME/testem/both.json"
}

## Utils

function set_terminal_title() {
    export ___TERMINAL_TITLE=$1
    PROMPT_COMMAND='echo -ne "\033]0;${___TERMINAL_TITLE}\007"'
}

